use sh4core::cpu::CPU;

// fn main() {
//     let mut unique_masks = vec![];

//     for opcode in OPCODES_TABLE.clone() {
//         if unique_masks.contains(&opcode.mask) {
//             continue;
//         }

//         unique_masks.push(opcode.mask);
//     }

//     for mask in unique_masks {
//         println!("{:016b}", mask);
//     }
// }

fn main() {
    let mut cpu = CPU::new();
    let program = vec![
        0xe6, 0x2f, 0xf8, 0x7f, 0xf3, 0x6e, 0xe3, 0x61, 0xc8, 0x71, 0x02, 0xe2, 0x2f, 0x11, 0xe3,
        0x61, 0xc8, 0x71, 0x03, 0xe2, 0x2e, 0x11, 0xe3, 0x62, 0xc8, 0x72, 0xe3, 0x61, 0xc8, 0x71,
        0x2f, 0x52, 0x1e, 0x51, 0x2c, 0x31, 0x13, 0x60, 0x08, 0x7e, 0xe3, 0x6f, 0xf6, 0x6e, 0x0b,
        0x00, 0x09, 0x00,
    ];

    cpu.registers.pc = 0;
    cpu.registers.r[15] = 0x2000;
    cpu.registers.r[14] = 0x1050;

    cpu.bus.write_bin(0, program.clone());

    for _ in 0..(program.len() / 2) {
        cpu.step();
    }

    println!("{}", cpu.registers);
}
