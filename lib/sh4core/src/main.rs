use std::{fs, io::Write};

use sh4core::cpu::CPU;

fn main() {
    let mut cpu = CPU::new();
    let program = vec![
        //
        // short a = 2;
        //
        0x2F, 0xE6, 0x7F, 0xF8, 0x6E, 0xF3, 0x61, 0xE3, 0x71, 0xC8, 0xE2, 0x02, 0x11, 0x2F,
        //
        // short b = 3;
        //
        0x61, 0xE3, 0x71, 0xC8, 0xE2, 0x03, 0x11, 0x2E,
        //
        // return a + b;
        //
        0x62, 0xE3, 0x72, 0xC8, 0x61, 0xE3, 0x71, 0xC8, 0x52, 0x2F, 0x51, 0x1E, 0x31, 0x2C,
        //
        // Exit
        //
        0x60, 0x13, 0x7E, 0x08, 0x6F, 0xE3, 0x6E, 0xF6, 0x00, 0x0B, 0x00, 0x09,
    ];
    // let program = vec![
    //     //
    //     // short a = 2;
    //     //
    //     0x2F, 0xE6, 0x7F, 0xFC, 0x6E, 0xF3, 0x61, 0xE3, 0x71, 0xE4, 0xE2, 0x02, 0x60, 0x23, 0x81,
    //     0x1F, //
    //     // short b = 3;
    //     //
    //     0x61, 0xE3, 0x71, 0xE4, 0xE2, 0x03, 0x60, 0x23, 0x81, 0x1E,
    //     //
    //     // return a + b;
    //     //
    //     0x61, 0xE3, 0x71, 0xE4, 0x85, 0x1F, 0x61, 0x03, 0x62, 0x1D, 0x61, 0xE3, 0x71, 0xE4, 0x85,
    //     0x1E, 0x61, 0x03, 0x61, 0x1D, 0x31, 0x2C, 0x61, 0x1D, 0x61, 0x1F,
    //     //
    //     // Exit
    //     //
    //     0x60, 0x13, 0x7E, 0x04, 0x6F, 0xE3, 0x6E, 0xF6, 0x00, 0x0B, 0x00, 0x09,
    // ];

    let mut file = fs::OpenOptions::new()
        .create(true)
        .truncate(true)
        .write(true)
        .open("my_program.bin")
        .unwrap();
    file.write_all(&program).unwrap();

    cpu.registers.pc = 0;
    cpu.registers.r[15] = 0x2000;
    cpu.registers.r[14] = 0x1050;

    cpu.bus.write_bin(0, program.clone());

    for _ in 0..(program.len() / 2) {
        cpu.step();
        println!("{}", cpu.registers);
    }

    println!("{}", cpu.registers);
}
