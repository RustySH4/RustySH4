use genco::prelude::*;
use itertools::Itertools;
use scraper::{Html, Selector};
use std::collections::HashMap;

use super::helper::{cleanup_register_names, get_nth_cell_of_table};

pub fn generate_mask(inp: &str, char: char) -> u32 {
    let string_mask = inp
        .chars()
        .map(|x| if x == char { '1' } else { '0' })
        .collect::<String>();

    isize::from_str_radix(&string_mask, 2).unwrap() as u32
}

pub fn generate_args(inp: &str) -> HashMap<String, u32> {
    let mut args: HashMap<String, u32> = HashMap::new();

    let chars = inp.chars().unique();

    for char in chars {
        if char == '0' || char == '1' {
            continue;
        }

        let mask = generate_mask(inp, char);
        args.insert(char.to_string(), mask);
    }

    args
}

pub fn generate_opcodes(html_content: &str) -> rust::Tokens {
    // Parse table from HTML
    let document = Html::parse_document(html_content);

    let row_selector = Selector::parse(r#"div.col_cont"#).unwrap();
    let mut op_code_tokens: Vec<rust::Tokens> = vec![];

    for (i, row) in document.select(&row_selector).enumerate() {
        let arch = get_nth_cell_of_table(&row, 1);

        if !arch.contains("SH4") && !arch.contains("SH4A") {
            continue;
        }

        let name = cleanup_register_names(&get_nth_cell_of_table(&row, 2));
        let args = get_nth_cell_of_table(&row, 4);

        let mask = generate_mask(&args, '0') | generate_mask(&args, '1');
        let code = generate_mask(&args, '1');

        let args_map = generate_args(&args);

        op_code_tokens.push(quote! {
            OpCode {
                id: $(i as u32),
                display: $("\"")$name$("\"").to_string(),
                mask: $mask,
                code: $code,
                args: OpCodeArgs {
                    n: $(*args_map.get("n").unwrap_or(&0)),
                    m: $(*args_map.get("m").unwrap_or(&0)),
                    d: $(*args_map.get("d").unwrap_or(&0)),
                    i: $(*args_map.get("i").unwrap_or(&0))
                }
            }
        });
    }

    // TODO: Generate abstract table
    quote! {
        $(format!("// THIS CODE WAS GENERATED BY SH4GENERATOR v{} BY FRANCISZEK ŁOPUSZAŃSKI", env!("CARGO_PKG_VERSION")))
        #![allow(unused)]
        use std::fmt;

        #[derive(Debug, Clone)]
        pub struct OpCode {
            pub id: usize,
            pub display: String,
            pub mask: u16,
            pub code: u16,
            pub args: OpCodeArgs,
        }

        impl fmt::Display for OpCode {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                let mut display = self.display.clone();

                display = display.replace(",", ", ");
                display = display.replace("Rn", &format!("R{}", self.args.n));
                display = display.replace("Rm", &format!("R{}", self.args.m));
                display = display.replace("disp", &format!("R{}", self.args.d));
                display = display.replace("#imm", &format!("0x{:04X}", self.args.i));
                display = display.trim().to_string();

                write!(f, "{}", display)
            }
        }

        #[derive(Debug, Default, Clone, Copy)]
        pub struct OpCodeArgs {
            pub n: u16,
            pub m: u16,
            pub i: u16,
            pub d: u16,
        }

        impl OpCode {
            pub fn decode_instruction(inp: u16) -> Option<OpCode> {
                for opcode in OPCODES_TABLE.iter() {
                    if (inp & opcode.mask) != opcode.code {
                        continue;
                    }

                    let mut res = opcode.clone();

                    fn set_arg(inp: u16, mask: u16) -> u16 {
                        if mask == 0 {
                            return 0;
                        }

                        (inp & mask) >> mask.trailing_zeros()
                    }

                    res.args.n = set_arg(inp, opcode.args.n);
                    res.args.m = set_arg(inp, opcode.args.m);
                    res.args.d = set_arg(inp, opcode.args.d);
                    res.args.i = set_arg(inp, opcode.args.i);

                    return Some(res);
                }

                None
            }
        }

        lazy_static! {
            pub static ref OPCODES_TABLE: [OpCode; $(op_code_tokens.len())] = [
                $(for op_code_token in op_code_tokens => $op_code_token $(",")$['\n'])
            ];
        }
    }
}
