use genco::prelude::*;
use itertools::Itertools;
use scraper::{Html, Selector};
use std::collections::HashMap;

use super::helper::{cleanup_register_names, get_nth_cell_of_table};

pub fn generate_mask(inp: &str, char: char) -> u32 {
    let string_mask = inp
        .chars()
        .map(|x| if x == char { '1' } else { '0' })
        .collect::<String>();

    isize::from_str_radix(&string_mask, 2).unwrap() as u32
}

pub fn generate_args(inp: &str) -> HashMap<String, u32> {
    let mut args: HashMap<String, u32> = HashMap::new();

    let chars = inp.chars().unique();

    for char in chars {
        if char == '0' || char == '1' {
            continue;
        }

        let mask = generate_mask(inp.clone(), char);
        args.insert(char.to_string(), mask);
    }

    args
}

pub fn generate_opcodes(html_content: &str) -> rust::Tokens {
    // Genco import
    let hash_map = rust::import("std::collections", "HashMap");

    // Parse table from HTML
    let document = Html::parse_document(html_content);

    let row_selector = Selector::parse(r#"div.col_cont"#).unwrap();
    let mut op_code_tokens: Vec<rust::Tokens> = vec![];

    for (i, row) in document.select(&row_selector).enumerate() {
        let arch = get_nth_cell_of_table(&row, 1);

        if !arch.contains("SH4") && !arch.contains("SH4A") {
            continue;
        }

        let name = cleanup_register_names(&get_nth_cell_of_table(&row, 2));
        let args = get_nth_cell_of_table(&row, 4);

        let mask = generate_mask(&args, '0') | generate_mask(&args, '1');
        let code = generate_mask(&args, '1');

        let args_map = generate_args(&args)
            .into_iter()
            .collect::<Vec<(String, u32)>>();

        op_code_tokens.push(quote! {
            OPCode {
                id: $(i as u32),
                name: $("\"")$name$("\""),
                mask: $mask,
                code: $code,
                args: $(hash_map.clone())::from($(format!("{:?}", args_map)))
            }
        });
    }

    // TODO: Generate abstract table
    quote! {
        $(format!("// THIS CODE WAS GENERATED BY SH4GENERATOR v{} BY FRANCISZEK ŁOPUSZAŃSKI", env!("CARGO_PKG_VERSION")))
        $("// DO NOT EDIT THIS FILE!")
        use std::collections::HashMap;

        #[allow(dead_code)]
        struct OPCode {
            id: u32,
            name: &'static str,
            // TODO: Generate as binary representation
            mask: u32,
            code: u32,
            args: HashMap<&'static str, u32>,
        }

        lazy_static! {
            static ref OPCODES_TABLE: [OPCode; $(op_code_tokens.len())] = [
                $(for op_code_token in op_code_tokens => $op_code_token $(",")$['\n'])
            ];
        }
    }
}
