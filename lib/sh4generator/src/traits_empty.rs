use genco::prelude::*;
use scraper::{Html, Selector};

use super::helper::get_nth_cell_of_table;

pub fn generate_traits_empty(html_content: &str) -> rust::Tokens {
    // Parse table from HTML
    let document = Html::parse_document(html_content);

    let row_selector = Selector::parse(r#"div.col_cont"#).unwrap();
    let mut function_names: Vec<String> = vec![];

    for row in document.select(&row_selector) {
        let arch = get_nth_cell_of_table(&row, 1);

        if !arch.contains("SH4") && !arch.contains("SH4A") {
            continue;
        }

        let col_cont_selector = Selector::parse(r#"div.col_cont_note"#).unwrap();
        let col_cont = row.select(&col_cont_selector).next().unwrap();

        let precode_selector = Selector::parse(r#"pre"#).unwrap();
        let precode = col_cont
            .select(&precode_selector)
            .next()
            .unwrap()
            .text()
            .collect::<String>();

        // TODO: Replace this trash with nom or pest parser
        for line in precode.lines() {
            if let Some(first) = line.split(' ').next() {
                if first == "#define" || line.trim().is_empty() {
                    continue;
                }

                let mut name: String = if first != "void" {
                    first.to_string()
                } else {
                    line.split(' ').nth(1).unwrap().to_string()
                };

                if function_names.contains(&name) {
                    name += "_DUP"
                }

                function_names.push(name);

                break;
            }
        }
    }

    quote! {
        $(format!("// THIS CODE WAS GENERATED BY SH4GENERATOR v{} BY FRANCISZEK ŁOPUSZAŃSKI", env!("CARGO_PKG_VERSION")))
        $("// DO NOT EDIT THIS FILE!")
        use super::memory::SH4Memory;
        use super::registers::SH4Registers;

        #[allow(non_snake_case)]
        pub trait SH4ISA {
            fn access_registers(&mut self) -> &mut SH4Registers;
            fn access_memory(&mut self) -> &mut SH4Memory;

            $(for function_name in function_names => $(quote!(
                fn $function_name(&self){
                    todo!()
                }$['\n']
            )))
        }
    }
}
